{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO8PrmklEWGn0/9jciFHb0T",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kalai2315/Airbnb_Project/blob/main/AirBnb.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l_TbWPV_LRk3"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import streamlit as st\n",
        "import plotly.express as px\n",
        "import pymongo\n",
        "from pymongo import MongoClient\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image\n",
        "\n",
        "\n",
        "\n",
        "# Set page configuration\n",
        "st.set_page_config(\n",
        "    page_title=\"Airbnb Data Analysis\",\n",
        "    page_icon=\":house:\",\n",
        "    layout=\"wide\"\n",
        ")\n",
        "\n",
        "image = Image.open('F:\\project\\Airbnb\\download (1).png')\n",
        "st.image(image)\n",
        "# Title and description\n",
        "st.title('Airbnb Data Analysis')\n",
        "st.write(\"Explore insights from the Airbnb dataset.\")\n",
        "\n",
        "# CREATING CONNECTION WITH MONGODB ATLAS AND RETRIEVING THE DATA\n",
        "client = pymongo.MongoClient(\"mongodb+srv://kalaiselvimaheshkumar:DevDhakshi@cluster0.hgirp18.mongodb.net/sample_airbnb?retryWrites=true&w=majority\")\n",
        "db = client.sample_airbnb\n",
        "collection = db.listingsAndReviews\n",
        "\n",
        "# Load the data\n",
        "df = pd.read_csv('F:\\project\\Airbnb\\Airbnb_Data.csv')\n",
        "\n",
        "st.markdown(\n",
        "    \"\"\"\n",
        "    <style>\n",
        "    /* Adjust the width of the select boxes */\n",
        "    div[data-baseweb=\"select\"] > div:first-child {\n",
        "        max-width: 150px;  /* Set the maximum width */\n",
        "    }\n",
        "    </style>\n",
        "    \"\"\",\n",
        "    unsafe_allow_html=True\n",
        ")\n",
        "# Filter by country\n",
        "selected_country = st.selectbox('Select Country', df['Country'].unique())\n",
        "\n",
        "# Filter DataFrame based on the selected country\n",
        "filtered_df = df[df['Country'] == selected_country]\n",
        "\n",
        "# Group by property type and count listings\n",
        "property_type_counts = filtered_df['Property_type'].value_counts().reset_index()\n",
        "property_type_counts.columns = ['Property_type', 'Count']\n",
        "\n",
        "# Create bar chart for property types\n",
        "fig = px.bar(property_type_counts, x='Property_type', y='Count', title=f'Property Types in {selected_country}')\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "\n",
        "\n",
        "# Filter by property type\n",
        "selected_property_type = st.selectbox('Property Type', df['Property_type'].unique())\n",
        "\n",
        "# Filter DataFrame based on the selected property type\n",
        "filtered_df = df[df['Property_type'] == selected_property_type]\n",
        "\n",
        "bed_type_counts = filtered_df['Bed_type'].value_counts().reset_index()\n",
        "bed_type_counts.columns = ['Bed_type', 'Count']\n",
        "\n",
        "# Group by room type and count listings\n",
        "room_type_counts = filtered_df['Room_type'].value_counts().reset_index()\n",
        "room_type_counts.columns = ['Room_type', 'Count']\n",
        "\n",
        "# Calculate percentage of bed type and room type\n",
        "total_bed_type_listings = bed_type_counts['Count'].sum()\n",
        "total_room_type_listings = room_type_counts['Count'].sum()\n",
        "bed_type_counts['Percentage'] = bed_type_counts['Count'] / total_bed_type_listings * 100\n",
        "room_type_counts['Percentage'] = room_type_counts['Count'] / total_room_type_listings * 100\n",
        "\n",
        "# Create bar chart using Plotly\n",
        "fig_bar = px.bar(bed_type_counts, x='Bed_type', y='Count', title='Bed Type Distribution',\n",
        "                 labels={'Bed_type': 'Bed Type', 'Count': 'Number of Listings'})\n",
        "st.plotly_chart(fig_bar)\n",
        "\n",
        "# Create pie chart using Plotly\n",
        "fig_pie = px.pie(room_type_counts, values='Count', names='Room_type', title='Room Type Distribution',\n",
        "                 labels={'Room_type': 'Room Type', 'Count': 'Number of Listings'})\n",
        "st.plotly_chart(fig_pie)\n",
        "\n",
        "# Group by minimum nights and count listings\n",
        "min_nights_counts = filtered_df['Min_nights'].value_counts().reset_index()\n",
        "min_nights_counts.columns = ['Min_nights', 'Count']\n",
        "\n",
        "# Group by maximum nights and count listings\n",
        "max_nights_counts = filtered_df['Max_nights'].value_counts().reset_index()\n",
        "max_nights_counts.columns = ['Max_nights', 'Count']\n",
        "\n",
        "# Create figure for minimum nights distribution\n",
        "fig_min_nights = px.bar(min_nights_counts, x='Min_nights', y='Count',\n",
        "                         labels={'Min_nights': 'Minimum Nights', 'Count': 'Number of Listings'},\n",
        "                         title='Minimum Nights Distribution')\n",
        "fig_min_nights.update_layout(xaxis=dict(type='category'))\n",
        "\n",
        "# Create figure for maximum nights distribution\n",
        "fig_max_nights = px.bar(max_nights_counts, x='Max_nights', y='Count',\n",
        "                         labels={'Max_nights': 'Maximum Nights', 'Count': 'Number of Listings'},\n",
        "                         title='Maximum Nights Distribution')\n",
        "fig_max_nights.update_layout(xaxis=dict(type='category'))\n",
        "\n",
        "# Display the figures using Plotly\n",
        "st.plotly_chart(fig_min_nights)\n",
        "st.plotly_chart(fig_max_nights)\n",
        "\n",
        "import plotly.figure_factory as ff\n",
        "\n",
        "with st.expander(\"Property_type wise Room_type and Minimum stay nights\"):\n",
        "    df_sample = filtered_df[[\"Property_type\", \"Bed_type\", \"Room_type\", \"Price\", \"Min_nights\", \"Host_name\"]]\n",
        "    fig = ff.create_table(df_sample, colorscale=\"Cividis\")\n",
        "    st.write(df_sample)\n",
        "\n",
        "# Group by cancellation policy and count listings for each policy\n",
        "cancellation_policy_counts = filtered_df['Cancellation_policy'].value_counts().reset_index()\n",
        "cancellation_policy_counts.columns = ['Cancellation_policy', 'Count']\n",
        "\n",
        "# Calculate the percentage of listings for each cancellation policy\n",
        "total_listings = cancellation_policy_counts['Count'].sum()\n",
        "cancellation_policy_counts['Percentage'] = cancellation_policy_counts['Count'] / total_listings * 100\n",
        "\n",
        "# Plot the line chart\n",
        "fig = px.line(cancellation_policy_counts, x='Cancellation_policy', y='Percentage',\n",
        "              title='Cancellation Policy Distribution')\n",
        "fig.update_traces(hovertemplate='<b>%{x}</b><br>Percentage: %{y:.2f}%')\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "# Count the number of listings for each value of Accommodates\n",
        "accommodates_counts = filtered_df['Accomodates'].value_counts().reset_index()\n",
        "accommodates_counts.columns = ['Accomodates', 'Count']\n",
        "\n",
        "# Count the number of listings for each value of Total_bedrooms\n",
        "bedrooms_counts = filtered_df['Total_bedrooms'].value_counts().reset_index()\n",
        "bedrooms_counts.columns = ['Total_bedrooms', 'Count']\n",
        "\n",
        "# Count the number of listings for each value of Total_beds\n",
        "beds_counts = filtered_df['Total_beds'].value_counts().reset_index()\n",
        "beds_counts.columns = ['Total_beds', 'Count']\n",
        "\n",
        "# Create Streamlit columns\n",
        "col1, col2 = st.columns(2)\n",
        "\n",
        "\n",
        "with col1:\n",
        "    fig_bedrooms = px.bar(bedrooms_counts, x='Total_bedrooms', y='Count',\n",
        "                      labels={'Total_bedrooms': 'Bedrooms', 'Count': 'Count'},\n",
        "                      title='Bedrooms Distribution')\n",
        "    st.plotly_chart(fig_bedrooms)\n",
        "with col2:\n",
        "   fig_beds = px.bar(beds_counts, x='Total_beds', y='Count',\n",
        "                  labels={'Total_beds': 'Beds', 'Count': 'Count'},\n",
        "                  title='Beds Distribution')\n",
        "   st.plotly_chart(fig_beds)\n",
        "\n",
        "\n",
        "\n",
        "# Select country (with unique key)\n",
        "selected_country = st.selectbox('Select Country', df['Country'].unique(), key='country_select')\n",
        "\n",
        "# Filter DataFrame based on the selected country\n",
        "filtered_df = df[df['Country'] == selected_country]\n",
        "\n",
        "# Tabs for different analyses\n",
        "tab1, tab2, tab3, tab4 = st.tabs(['Price', 'Cleaning Fee', 'Extra People', 'Guests Included'])\n",
        "\n",
        "# Price Analysis\n",
        "with tab1:\n",
        "    # Extract the necessary columns\n",
        "    price_analysis_df = filtered_df[['Property_type', 'Room_type', 'Price']]\n",
        "\n",
        "    # Handle missing values if needed\n",
        "    price_analysis_df.dropna(inplace=True)  # Drop rows with missing values\n",
        "\n",
        "    # Create Streamlit columns layout\n",
        "    col1, col2 = st.columns(2)\n",
        "\n",
        "    # Plot bar chart for price distribution by property type in the first column\n",
        "    with col1:\n",
        "        st.subheader(f'Price Distribution Analysis')\n",
        "        fig = px.bar(price_analysis_df, x='Property_type', y='Price', title=f'Price Distribution by Property Type in {selected_country}')\n",
        "        fig.update_layout(xaxis_title='Property Type', yaxis_title='Price')\n",
        "        st.plotly_chart(fig)\n",
        "\n",
        "    with col2:\n",
        "        fig = px.bar(price_analysis_df, x='Room_type', y='Price', title=f'Price Distribution by Room Type in {selected_country}')\n",
        "        fig.update_layout(xaxis_title='Room Type', yaxis_title='Price')\n",
        "        st.plotly_chart(fig)\n",
        "# Cleaning Fee Analysis\n",
        "with tab2:\n",
        "    # Extract the necessary column\n",
        "    cleaning_fee_analysis_df = filtered_df[['Cleaning_fee']]\n",
        "\n",
        "    # Handle missing values if needed\n",
        "    cleaning_fee_analysis_df.dropna(inplace=True)  # Drop rows with missing values\n",
        "\n",
        "        #st.subheader(f'Cleaning Fee Distribution in {selected_country}')\n",
        "    fig = px.histogram(cleaning_fee_analysis_df, x='Cleaning_fee', title=f'Cleaning Fee Distribution in {selected_country}', nbins=20)\n",
        "    fig.update_layout(xaxis_title='Cleaning Fee', yaxis_title='Frequency')\n",
        "    st.plotly_chart(fig)\n",
        "\n",
        "with tab3:\n",
        "    # Extra People Analysis\n",
        "    extra_people_analysis_df = filtered_df[['Extra_people']]\n",
        "\n",
        "    # Handle missing values if needed\n",
        "    extra_people_analysis_df.dropna(inplace=True)  # Drop rows with missing values\n",
        "\n",
        "    # Plot histogram for extra people charges distribution using Plotly\n",
        "    fig = px.histogram(extra_people_analysis_df, x='Extra_people', nbins=20,\n",
        "                    title=f'Extra People Charges Distribution in {selected_country}',\n",
        "                    labels={'Extra_people': 'Extra People Charges', 'count': 'Frequency'},\n",
        "                    marginal='rug', color_discrete_sequence=['#FFA15A'])  # Set color for histogram\n",
        "    fig.update_layout(xaxis_title='Extra People Charges', yaxis_title='Frequency')\n",
        "    st.plotly_chart(fig)\n",
        "\n",
        "with tab4:\n",
        "    # Guests Included Analysis\n",
        "    guests_included_analysis_df = filtered_df[['Guests_included']]\n",
        "\n",
        "    # Handle missing values if needed\n",
        "    guests_included_analysis_df.dropna(inplace=True)  # Drop rows with missing values\n",
        "\n",
        "    # Plot bar chart for guests included distribution\n",
        "    fig = px.histogram(guests_included_analysis_df, x='Guests_included',\n",
        "                    title=f'Number of Guests Included Distribution in {selected_country}',\n",
        "                    labels={'Guests_included': 'Number of Guests Included', 'count': 'Count'},\n",
        "                    color_discrete_sequence=['#FFFF00'])  # Set color for bars\n",
        "    fig.update_layout(xaxis_title='Number of Guests Included', yaxis_title='Count')\n",
        "    st.plotly_chart(fig)\n",
        "\n",
        "st.subheader(\"Review Distribution Analysis\")\n",
        "reviews_analysis_df = filtered_df[['No_of_reviews', 'Review_scores']]\n",
        "\n",
        "# Handle missing values if needed\n",
        "reviews_analysis_df.dropna(inplace=True)  # Drop rows with missing values\n",
        "\n",
        "# Create Streamlit columns layout\n",
        "col1, col2 = st.columns(2)\n",
        "\n",
        "# Plot histogram for number of reviews distribution in the first column\n",
        "with col1:\n",
        "    fig_reviews = px.histogram(reviews_analysis_df, x='No_of_reviews', title=f'Number of Reviews Distribution in {selected_country}',\n",
        "                               labels={'No_of_reviews': 'Number of Reviews', 'count': 'Frequency'})\n",
        "    fig_reviews.update_layout(xaxis_title='Number of Reviews', yaxis_title='Frequency')\n",
        "    st.plotly_chart(fig_reviews)\n",
        "\n",
        "# Plot histogram for review scores distribution in the second column\n",
        "with col2:\n",
        "    fig_scores = px.histogram(reviews_analysis_df, x='Review_scores', title=f'Review Scores Distribution in {selected_country}',\n",
        "                              labels={'Review_scores': 'Review Scores', 'count': 'Frequency'})\n",
        "    fig_scores.update_layout(xaxis_title='Review Scores', yaxis_title='Frequency')\n",
        "    st.plotly_chart(fig_scores)\n",
        "\n",
        "from collections import Counter\n",
        "\n",
        "st.subheader(\"Top 10 Amenities\")\n",
        "amenities_data = filtered_df['Amenities']\n",
        "\n",
        "# Parse amenities and count frequency\n",
        "amenities_list = []\n",
        "for amenities in amenities_data:\n",
        "    amenities_list.extend(amenities.strip('{}').split(','))\n",
        "\n",
        "# Count frequency of each amenity\n",
        "amenities_count = Counter(amenities_list)\n",
        "\n",
        "# Convert to DataFrame\n",
        "amenities_df = pd.DataFrame(amenities_count.items(), columns=['Amenity', 'Count'])\n",
        "\n",
        "# Sort DataFrame by count in descending order\n",
        "amenities_df = amenities_df.sort_values(by='Count', ascending=False)\n",
        "\n",
        "# Select top 10 amenities\n",
        "top_10_amenities = amenities_df.head(10)\n",
        "\n",
        "# Create bar chart using Plotly\n",
        "fig = px.bar(top_10_amenities, x='Count', y='Amenity', orientation='h',\n",
        "             title=f'Top 10 Amenities in {selected_country}', labels={'Count': 'Frequency', 'Amenity': 'Amenity'})\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}